from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# Sample dataset (replace with your dataset)

dataset = [
    {"Tag": "Array", "Question": "What is an array?", "Answer": "An array is a data structure that stores a collection of elements."},
    {"Tag": "Array", "Question": "What are the advantages of using arrays?", "Answer": "Arrays provide constant-time access to elements and are suitable for storing elements of the same data type in contiguous memory locations."},
    {"Tag": "Array", "Question": "What are the disadvantages of arrays?", "Answer": "Arrays have a fixed size, which means they cannot dynamically resize. Insertions and deletions at arbitrary positions can be inefficient."},
    {"Tag": "Array", "Question": "How do you declare an array in Python?", "Answer": "You can declare an array in Python using the array module or using list literals."},
    {"Tag": "Array", "Question": "What is the difference between an array and a list in Python?", "Answer": "An array in Python is a data structure from the array module that stores elements of the same data type in contiguous memory locations. A list, on the other hand, is a built-in data structure that can store elements of different data types and can dynamically resize."},
    {"Tag": "Array", "Question": "How do you access elements in an array?", "Answer": "You can access elements in an array by using their index. For example, arr[0] would access the first element of the array."},
    {"Tag": "Array", "Question": "What is the time complexity of accessing elements in an array?", "Answer": "Accessing elements in an array by index has a time complexity of O(1), as it directly computes the memory address of the element."},
    {"Tag": "Array", "Question": "How do you insert an element into an array?", "Answer": "You can insert an element into an array by shifting existing elements to make space for the new element and then placing the new element at the desired position."},
    {"Tag": "Array", "Question": "What is the time complexity of inserting an element into an array?", "Answer": "The time complexity of inserting an element into an array depends on the position of insertion. In the worst case, if the element is inserted at the beginning, it has a time complexity of O(n) as all elements need to be shifted. If the element is inserted at the end, it has a time complexity of O(1)."},
    {"Tag": "Array", "Question": "How do you delete an element from an array?", "Answer": "You can delete an element from an array by shifting subsequent elements to fill the gap created by the deletion."},
    {"Tag": "Array", "Question": "What is the time complexity of deleting an element from an array?", "Answer": "Similar to insertion, the time complexity of deleting an element from an array depends on the position of deletion. In the worst case, if the element is deleted from the beginning, it has a time complexity of O(n) as all elements need to be shifted. If the element is deleted from the end, it has a time complexity of O(1)."},
    {"Tag": "Array", "Question": "What is a dynamic array?", "Answer": "A dynamic array is a data structure that dynamically resizes itself to accommodate additional elements when needed. It combines the features of an array and a linked list, providing constant-time access to elements and dynamic resizing capabilities."},
    {"Tag": "Array", "Question": "What is the time complexity of appending an element to a dynamic array?", "Answer": "Appending an element to a dynamic array has an amortized time complexity of O(1). This is because the array may need to resize occasionally, but over a series of append operations, the resizing overhead is distributed, resulting in constant-time complexity on average."},
    {"Tag": "Array", "Question": "What is a two-dimensional array?", "Answer": "A two-dimensional array, also known as a matrix, is an array of arrays where each element is itself an array. It is commonly used to represent tabular data or grids."},
    {"Tag": "Array", "Question": "How do you declare a two-dimensional array?", "Answer": "In languages like C or C++, you can declare a two-dimensional array using syntax like int arr[rows][columns]. In Python, you can use nested lists or arrays to represent a two-dimensional array."},
    {"Tag": "Array", "Question": "What is a jagged array?", "Answer": "A jagged array is an array of arrays where each element can be an array of different sizes. Unlike a two-dimensional array, the sub-arrays in a jagged array can have varying lengths."},
    {"Tag": "Array", "Question": "What are sparse arrays?", "Answer": "Sparse arrays are arrays where most of the elements have a default value (usually zero or null) and only a few elements have non-default values. They are used to efficiently represent and manipulate large arrays with a significant number of default values."},
    {"Tag": "Array", "Question": "What is an array data structure?", "Answer": "An array data structure is a collection of elements stored in contiguous memory locations, each identified by at least one array index or key."},
    {"Tag": "Array", "Question": "What are some common operations on arrays?", "Answer": "Common operations on arrays include accessing elements by index, inserting elements, deleting elements, searching for elements, and iterating over elements."},
    {"Tag": "Array", "Question": "What is a one-dimensional array?", "Answer": "A one-dimensional array is the simplest form of an array, consisting of a single line of elements stored in contiguous memory locations."},
    {"Tag": "Array", "Question": "What is a multi-dimensional array?", "Answer": "A multi-dimensional array is an array that contains one or more arrays as its elements. Each element can also be an array, forming a nested structure of arrays."},
    {"Tag": "Array", "Question": "What is an array index?", "Answer": "An array index is a numeric value used to identify and access individual elements within an array. The index typically starts from zero and increments sequentially."},
    {"Tag": "Array", "Question": "What is an array element?", "Answer": "An array element is a single value stored within an array. Each element is identified by its index and can be accessed, modified, or processed individually."},
    {"Tag": "Array", "Question": "What is an array length?", "Answer": "An array length is the total number of elements contained within an array. It indicates the size or capacity of the array and is typically fixed or dynamically adjusted as elements are added or removed."},
    {"Tag": "Array", "Question": "What is an array size?", "Answer": "An array size refers to the physical or allocated memory space reserved for storing elements within an array. It determines the maximum number of elements that an array can hold and may or may not be equal to the array length."},
    {"Tag": "Array", "Question": "What is an array capacity?", "Answer": "An array capacity is the maximum number of elements that an array can hold based on its allocated memory size or storage space. It may or may not be equal to the array length."},
    {"Tag": "Array", "Question": "What is an array bounds?", "Answer": "Array bounds refer to the range of valid index values that can be used to access elements within an array. The lower bound is typically zero or one, and the upper bound is determined by the array length minus one."},
    {"Tag": "Array", "Question": "What is an array traversal?", "Answer": "An array traversal is the process of visiting each element in an array in a systematic order, such as sequentially from the beginning to the end or vice versa."},
    {"Tag": "Array", "Question": "What is an array search?", "Answer": "An array search is the process of finding a specific element within an array by comparing its value with the values of other elements."},
    {"Tag": "Array", "Question": "What is an array sort?", "Answer": "An array sort is the process of arranging the elements within an array in a specific order, such as ascending or descending, based on their values."},
    {"Tag": "Array", "Question": "What is an array copy?", "Answer": "An array copy is the process of duplicating the elements of one array into another array, either entirely or partially."},
    {"Tag": "Array", "Question": "What is an array merge?", "Answer": "An array merge is the process of combining the elements of two or more arrays into a single array, either by concatenating them or by interleaving their elements."},
    {"Tag": "Array", "Question": "What is an array split?", "Answer": "An array split is the process of dividing the elements of an array into two or more separate arrays based on a specified condition or delimiter."},
    {"Tag": "Array", "Question": "What is an array join?", "Answer": "An array join is the process of concatenating the elements of an array into a single string, with optional delimiters between the elements."},
    {"Tag": "Array", "Question": "What is an array fill?", "Answer": "An array fill is the process of assigning a specified value to all elements within an array, effectively initializing or resetting its contents."},
    {"Tag": "Array", "Question": "What is an array map?", "Answer": "An array map is a higher-order function or method that applies a specified function or operation to each element within an array, producing a new array of transformed values."},
    {"Tag": "Array", "Question": "What is an array filter?", "Answer": "An array filter is a higher-order function or method that selects and returns a subset of elements from an array based on a specified condition or predicate."},
    {"Tag": "Array", "Question": "What is an array reduce?", "Answer": "An array reduce is a higher-order function or method that applies a specified binary operation or accumulator function to pairs of elements within an array, ultimately reducing them to a single value."},
    {"Tag": "Array", "Question": "What is an array slice?", "Answer": "An array slice is a contiguous subsequence of elements extracted from an array, specified by a starting index and an optional ending index."},
    {"Tag": "Array", "Question": "What is an array splice?", "Answer": "An array splice is the process of inserting, deleting, or replacing elements within an array at a specified position or range, effectively modifying its contents."},
    {"Tag": "Array", "Question": "What is an array reverse?", "Answer": "An array reverse is the process of reversing the order of elements within an array, such that the first element becomes the last and vice versa."},
    {"Tag": "Array", "Question": "What is an array rotation?", "Answer": "An array rotation is the process of cyclically shifting the elements within an array by a specified number of positions, either to the left or to the right."},
    {"Tag": "Array", "Question": "What is an array transpose?", "Answer": "An array transpose is the process of interchanging the rows and columns of a two-dimensional array, effectively flipping it along its main diagonal."},
    {"Tag": "Array", "Question": "What is an array copy constructor?", "Answer": "An array copy constructor is a special method or function that creates a new array by copying the elements of an existing array into it."},
    {"Tag": "Array", "Question": "What is an array deep copy?", "Answer": "An array deep copy is a copy operation that duplicates not only the elements of an array but also any nested arrays or objects contained within it, ensuring complete independence between the original and copied arrays."},
    {"Tag": "Array", "Question": "What is an array shallow copy?", "Answer": "An array shallow copy is a copy operation that duplicates only the top-level structure of an array, including its elements, but not any nested arrays or objects contained within it, resulting in shared references between the original and copied arrays."},
    {"Tag": "Array", "Question": "What is an array comparison?", "Answer": "An array comparison is the process of determining whether two arrays are equal or equivalent in terms of their contents, lengths, and ordering of elements."},
    {"Tag": "Array", "Question": "What is an array intersection?", "Answer": "An array intersection is the process of finding the common elements shared between two or more arrays, resulting in a new array containing only those elements that appear in all input arrays."},
    {"Tag": "Array", "Question": "What is an array union?", "Answer": "An array union is the process of combining the unique elements from two or more arrays into a single array, excluding any duplicate elements."},
    {"Tag": "Array", "Question": "What is an array difference?", "Answer": "An array difference is the process of subtracting the elements of one array from another array, resulting in a new array containing only those elements that appear in the first array but not in the second array."},
    {"Tag": "Array", "Question": "What is an array symmetric difference?", "Answer": "An array symmetric difference is the process of finding the elements that are unique to each of the input arrays, excluding any elements that are shared between them."},
    {"Tag": "Array", "Question": "What is an array set?", "Answer": "An array set is a data structure that represents a collection of unique elements, typically implemented using an array-based or hash-based approach."},
    {"Tag": "Array", "Question": "What is an array set intersection?", "Answer": "An array set intersection is the process of finding the common elements shared between two or more sets, resulting in a new set containing only those elements that appear in all input sets."},
    {"Tag": "Array", "Question": "What is an array set union?", "Answer": "An array set union is the process of combining the unique elements from two or more sets into a single set, excluding any duplicate elements."},
    {"Tag": "Array", "Question": "What is an array set difference?", "Answer": "An array set difference is the process of subtracting the elements of one set from another set, resulting in a new set containing only those elements that appear in the first set but not in the second set."},
    {"Tag": "Array", "Question": "What is an array set symmetric difference?", "Answer": "An array set symmetric difference is the process of finding the elements that are unique to each of the input sets, excluding any elements that are shared between them."},
    {"Tag": "Linked List", "Question": "What is a linked list?", "Answer": "A linked list is a linear data structure where elements are stored in nodes. Each node contains a data element and a reference (link) to the next node in the sequence."},
    {"Tag": "Linked List", "Question": "What are the advantages of using linked lists over arrays?", "Answer": "Linked lists have dynamic size, efficient insertion and deletion at any position, and don't suffer from the overhead of resizing like arrays do."},
    {"Tag": "Linked List", "Question": "How do you implement a linked list in Python?", "Answer": "In Python, a linked list can be implemented using classes to represent nodes, where each node has attributes for data and a reference to the next node."},
    {"Tag": "Linked List", "Question": "What is a singly linked list?", "Answer": "A singly linked list is a type of linked list where each node contains a reference only to the next node in the sequence."},
    {"Tag": "Linked List", "Question": "What is a doubly linked list?", "Answer": "A doubly linked list is a type of linked list where each node contains references to both the next and previous nodes in the sequence."},
    {"Tag": "Linked List", "Question": "How do you traverse a linked list?", "Answer": "You can traverse a linked list by starting from the head node and following the references (links) to subsequent nodes until you reach the end."},
    {"Tag": "Linked List", "Question": "How do you insert a node at the beginning of a linked list?", "Answer": "To insert a node at the beginning of a linked list, create a new node with the data to be inserted, set its next reference to point to the current head node, and update the head reference to point to the new node."},
    {"Tag": "Linked List", "Question": "How do you insert a node at the end of a linked list?", "Answer": "To insert a node at the end of a linked list, traverse the list until you reach the last node, then set the next reference of the last node to point to the new node."},
    {"Tag": "Linked List", "Question": "How do you delete a node from a linked list?", "Answer": "To delete a node from a linked list, find the node to be deleted and update the next reference of its previous node to skip over it."},
    {"Tag": "Linked List", "Question": "What is the time complexity of various operations in a linked list?", "Answer": "The time complexity of various operations in a linked list depends on the specific operation. For example, inserting or deleting a node at the beginning or end of the list is typically O(1), while searching for a node or inserting/deleting at an arbitrary position is O(n), where n is the number of nodes in the list."},
    {"Tag": "Linked List", "Question": "What is a circular linked list?", "Answer": "A circular linked list is a type of linked list where the last node points back to the first node, forming a circular structure."},
    {"Tag": "Linked List", "Question": "How do you detect a loop in a linked list?", "Answer": "You can detect a loop in a linked list using Floyd's cycle detection algorithm, also known as the 'hare and tortoise' algorithm, which involves using two pointers to traverse the list at different speeds."},
    {"Tag": "Linked List", "Question": "What is the difference between a singly linked list and a doubly linked list?", "Answer": "In a singly linked list, each node contains a reference only to the next node, while in a doubly linked list, each node contains references to both the next and previous nodes."},
    {"Tag": "Linked List", "Question": "What is a self-referential structure in linked lists?", "Answer": "A self-referential structure in linked lists refers to the fact that each node contains a reference to another node of the same type, allowing for the creation of a sequence."},
    {"Tag": "Linked List", "Question": "How do you reverse a linked list?", "Answer": "You can reverse a linked list by traversing it and reversing the references (links) between nodes so that the last node becomes the first node and vice versa."},
    {"Tag": "Linked List", "Question": "What is a dummy node in a linked list?", "Answer": "A dummy node in a linked list is a placeholder node used to simplify operations such as insertion and deletion, particularly at the beginning or end of the list."},
    {"Tag": "Linked List", "Question": "What is a sentinel node in a linked list?", "Answer": "A sentinel node in a linked list is a special node that serves as a marker to indicate the beginning or end of the list, often used in conjunction with dummy nodes."},
    {"Tag": "Linked List", "Question": "How do you find the middle node of a linked list?", "Answer": "You can find the middle node of a linked list by using two pointers—one that moves one node at a time and another that moves two nodes at a time—until the faster pointer reaches the end of the list."},
    {"Tag": "Linked List", "Question": "What is a skip list?", "Answer": "A skip list is a probabilistic data structure that allows for fast search, insertion, and deletion operations by maintaining multiple layers of linked lists with increasingly sparse connections between nodes."},
    {"Tag": "Linked List", "Question": "What is a linked list cycle?", "Answer": "A linked list cycle occurs when a node in a linked list points to a previous node in the sequence, resulting in an infinite loop when traversing the list."},
    {"Tag": "Linked List", "Question": "What is a sentinel value in a linked list?", "Answer": "A sentinel value in a linked list is a special value used to indicate the end of the list, particularly in cases where the list does not contain explicit references to its end."},
    {"Tag": "Linked List", "Question": "How do you find the intersection point of two linked lists?", "Answer": "You can find the intersection point of two linked lists by first determining the difference in length between the lists, then advancing the pointer of the longer list by the difference and comparing nodes until a common node is found."},
    {"Tag": "Linked List", "Question": "What is a thread in a linked list?", "Answer": "A thread in a linked list refers to a link that connects nodes in a way that enables traversal in a specific order, such as in threaded binary trees."},
    {"Tag": "Linked List", "Question": "What is a trie?", "Answer": "A trie, also known as a prefix tree, is a tree-like data structure used to store a dynamic set of strings in a way that allows for efficient retrieval of strings with a common prefix."},
    {"Tag": "Linked List", "Question": "What is a XOR linked list?", "Answer": "A XOR linked list is a memory-efficient implementation of a linked list where each node contains a single reference that is the result of bitwise XOR operation between the addresses of its previous and next nodes."},
    {"Tag": "Linked List", "Question": "What is a linked list node?", "Answer": "A linked list node is a fundamental unit of a linked list data structure, consisting of a data element and one or more references (links) to other nodes."},
    {"Tag": "Linked List", "Question": "What is a heap in a linked list context?", "Answer": "In a linked list context, a heap refers to a binary heap data structure that can be implemented using linked lists, where each node satisfies the heap property with respect to its parent and children nodes."},
    {"Tag": "Linked List", "Question": "How do you merge two sorted linked lists?", "Answer": "You can merge two sorted linked lists by comparing nodes from each list and linking them together in sorted order until one of the lists is exhausted, then appending the remaining nodes from the other list."},
    {"Tag": "Linked List", "Question": "What is a lock-free linked list?", "Answer": "A lock-free linked list is a concurrent data structure that allows multiple threads to access and modify the list without using traditional locking mechanisms such as mutexes, using techniques such as compare-and-swap (CAS) operations."},
    {"Tag": "Linked List", "Question": "What is a wait-free linked list?", "Answer": "A wait-free linked list is a concurrent data structure that guarantees that every thread can complete its operation in a finite number of steps, regardless of the actions of other threads."},
    {"Tag": "Linked List", "Question": "How do you implement an iterator for a linked list?", "Answer": "To implement an iterator for a linked list, define a class that maintains a reference to the current node and provides methods for advancing to the next node and accessing its data element."},
    {"Tag": "Linked List", "Question": "What is a skip list node?", "Answer": "A skip list node is a node in a skip list data structure that contains references to nodes in the same level as well as nodes in higher levels, allowing for efficient traversal and search operations."},
    {"Tag": "Linked List", "Question": "What is a trie node?", "Answer": "A trie node is a node in a trie data structure that represents a single character in a string and contains references to child nodes representing subsequent characters."},
    {"Tag": "Linked List", "Question": "What is a radix tree?", "Answer": "A radix tree, also known as a compact trie or prefix tree, is a tree-like data structure used to store a dynamic set of strings in a way that allows for efficient retrieval based on their common prefixes."},
    {"Tag": "Linked List", "Question": "What is a linked list stack?", "Answer": "A linked list stack is a stack data structure implemented using a linked list, where elements are added and removed from the same end of the list, typically the head."},
    {"Tag": "Linked List", "Question": "What is a linked list queue?", "Answer": "A linked list queue is a queue data structure implemented using a linked list, where elements are added to one end of the list (rear) and removed from the other end (front)."},
    {"Tag": "Linked List", "Question": "What is a linked list hash table?", "Answer": "A linked list hash table is a hash table data structure implemented using an array of linked lists, where each element in the array corresponds to a hash bucket containing the keys that hash to the same value."},
    {"Tag": "Linked List", "Question": "How do you implement a linked list in C++?", "Answer": "In C++, a linked list can be implemented using classes to represent nodes, where each node has a data element and a pointer to the next node, along with methods for insertion, deletion, and traversal."},
    {"Tag": "Linked List", "Question": "What is a linked list map?", "Answer": "A linked list map is a map data structure implemented using a linked list to store key-value pairs, where each node contains a key-value pair and a reference to the next node."},
    {"Tag": "Linked List", "Question": "What is a linked list set?", "Answer": "A linked list set is a set data structure implemented using a linked list to store unique elements, where each node contains an element and a reference to the next node."},
    {"Tag": "Linked List", "Question": "How do you find the kth node from the end of a linked list?", "Answer": "You can find the kth node from the end of a linked list by using two pointers—one that advances k nodes ahead of the other—and moving both pointers simultaneously until the first pointer reaches the end of the list."},
    {"Tag": "Linked List", "Question": "What is a linked list cycle detection algorithm?", "Answer": "A linked list cycle detection algorithm is an algorithm used to determine whether a linked list contains a cycle (i.e., whether there is a node that points to a previous node in the sequence)."},
    {"Tag": "Linked List", "Question": "How do you remove duplicates from a sorted linked list?", "Answer": "You can remove duplicates from a sorted linked list by traversing the list and removing nodes with duplicate data elements, keeping only the first occurrence of each unique element."},
    {"Tag": "Linked List", "Question": "How do you flatten a linked list with nested structures?", "Answer": "You can flatten a linked list with nested structures by recursively traversing the list and merging each nested sublist into the main list."},
    {"Tag": "Linked List", "Question": "What is a linked list priority queue?", "Answer": "A linked list priority queue is a priority queue data structure implemented using a linked list to store elements with associated priorities, where higher-priority elements are placed closer to the front of the list."},
    {"Tag": "Linked List", "Question": "What is a linked list deque?", "Answer": "A linked list deque, short for double-ended queue, is a deque data structure implemented using a linked list, where elements can be added or removed from both ends of the list."},
    {"Tag": "Linked List", "Question": "How do you implement a circular linked list in Java?", "Answer": "In Java, a circular linked list can be implemented using classes to represent nodes, where each node has a data element and a reference to the next node, with the last node pointing back to the first node."},
    {"Tag": "Linked List", "Question": "What is a linked list graph?", "Answer": "A linked list graph is a graph data structure implemented using a linked list to represent the adjacency list of each vertex, where each node contains a neighboring vertex and optionally a weight or other properties of the edge."},
    {"Tag": "Linked List", "Question": "What is a linked list stack in Java?", "Answer": "A linked list stack in Java is a stack data structure implemented using a linked list, where elements are added and removed from the same end of the list, typically the head."},
    {"Tag": "Linked List", "Question": "What is a linked list queue in Java?", "Answer": "A linked list queue in Java is a queue data structure implemented using a linked list, where elements are added to one end of the list (rear) and removed from the other end (front)."},
    {"Tag": "Linked List", "Question": "How do you implement a linked list in JavaScript?", "Answer": "In JavaScript, a linked list can be implemented using objects to represent nodes, where each node has properties for data and a reference to the next node, and methods for insertion, deletion, and traversal."},
    {"Tag": "Linked List", "Question": "What is a linked list map in Java?", "Answer": "A linked list map in Java is a map data structure implemented using a linked list to store key-value pairs, where each node contains a key-value pair and a reference to the next node."},
    {"Tag": "Linked List", "Question": "What is a linked list set in Java?", "Answer": "A linked list set in Java is a set data structure implemented using a linked list to store unique elements, where each node contains an element and a reference to the next node."},
    {"Tag": "Linked List", "Question": "How do you find the kth node from the end of a linked list in Java?", "Answer": "You can find the kth node from the end of a linked list in Java by using two pointers—one that advances k nodes ahead of the other—and moving both pointers simultaneously until the first pointer reaches the end of the list."},
    {"Tag": "Linked List", "Question": "What is a linked list cycle detection algorithm in Java?", "Answer": "A linked list cycle detection algorithm in Java is an algorithm used to determine whether a linked list contains a cycle (i.e., whether there is a node that points to a previous node in the sequence)."},
    {"Tag": "Linked List", "Question": "How do you remove duplicates from a sorted linked list in Java?", "Answer": "You can remove duplicates from a sorted linked list in Java by traversing the list and removing nodes with duplicate data elements, keeping only the first occurrence of each unique element."},
    {"Tag": "Linked List", "Question": "What is a linked list priority queue in Java?", "Answer": "A linked list priority queue in Java is a priority queue data structure implemented using a linked list to store elements with associated priorities, where higher-priority elements are placed closer to the front of the list."},
    {"Tag": "Linked List", "Question": "What is a linked list deque in Java?", "Answer": "A linked list deque in Java, short for double-ended queue, is a deque data structure implemented using a linked list, where elements can be added or removed from both ends of the list."},
    {"Tag": "Linked List", "Question": "How do you implement a circular linked list in C?", "Answer": "In C, a circular linked list can be implemented using structures to represent nodes, where each node has a data element and a pointer to the next node, with the last node pointing back to the first node."},
    {"Tag": "Linked List", "Question": "What is a linked list graph in Java?", "Answer": "A linked list graph in Java is a graph data structure implemented using a linked list to represent the adjacency list of each vertex, where each node contains a neighboring vertex and optionally a weight or other properties of the edge."},
    {"Tag": "Linked List", "Question": "What is a linked list stack in C?", "Answer": "A linked list stack in C is a stack data structure implemented using a linked list, where elements are added and removed from the same end of the list, typically the head."},
    {"Tag": "Linked List", "Question": "What is a linked list queue in C?", "Answer": "A linked list queue in C is a queue data structure implemented using a linked list, where elements are added to one end of the list (rear) and removed from the other end (front)."},
    {"Tag": "Linked List", "Question": "How do you implement a linked list in C?", "Answer": "In C, a linked list can be implemented using structures to represent nodes, where each node has a data element and a pointer to the next node, along with functions for insertion, deletion, and traversal."},
    {"Tag": "Linked List", "Question": "What is a linked list map in C?", "Answer": "A linked list map in C is a map data structure implemented using a linked list to store key-value pairs, where each node contains a key-value pair and a reference to the next node."},
    {"Tag": "Linked List", "Question": "What is a linked list set in C?", "Answer": "A linked list set in C is a set data structure implemented using a linked list to store unique elements, where each node contains an element and a reference to the next node."},
    {"Tag": "Linked List", "Question": "How do you find the kth node from the end of a linked list in C?", "Answer": "You can find the kth node from the end of a linked list in C by using two pointers—one that advances k nodes ahead of the other—and moving both pointers simultaneously until the first pointer reaches the end of the list."},
    {"Tag": "Linked List", "Question": "What is a linked list cycle detection algorithm in C?", "Answer": "A linked list cycle detection algorithm in C is an algorithm used to determine whether a linked list contains a cycle (i.e., whether there is a node that points to a previous node in the sequence)."},
    {"Tag": "Linked List", "Question": "How do you remove duplicates from a sorted linked list in C?", "Answer": "You can remove duplicates from a sorted linked list in C by traversing the list and removing nodes with duplicate data elements, keeping only the first occurrence of each unique element."},
    {"Tag": "Linked List", "Question": "What is a linked list priority queue in C?", "Answer": "A linked list priority queue in C is a priority queue data structure implemented using a linked list to store elements with associated priorities, where higher-priority elements are placed closer to the front of the list."},
    {"Tag": "Linked List", "Question": "What is a linked list deque in C?", "Answer": "A linked list deque in C, short for double-ended queue, is a deque data structure implemented using a linked list, where elements can be added or removed from both ends of the list."},
    {"Tag": "Tree", "Question": "What is a tree data structure?", "Answer": "A tree is a hierarchical data structure that consists of nodes connected by edges. Each node has a parent node and zero or more child nodes."},
    {"Tag": "Tree", "Question": "What are the common types of trees?", "Answer": "Common types of trees include binary trees, binary search trees, AVL trees, red-black trees, B-trees, and trie trees."},
    {"Tag": "Tree", "Question": "What is a binary tree?", "Answer": "A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child."},
    {"Tag": "Tree", "Question": "What is a binary search tree (BST)?", "Answer": "A binary search tree is a binary tree in which the value of each node's left child is less than the value of the node, and the value of each node's right child is greater than the value of the node."},
    {"Tag": "Tree", "Question": "How do you implement a binary tree in Python?", "Answer": "In Python, a binary tree can be implemented using classes to represent nodes, where each node has attributes for data, left child, and right child."},
    {"Tag": "Tree", "Question": "What is a balanced tree?", "Answer": "A balanced tree is a tree data structure in which the heights of the left and right subtrees of any node differ by at most one, ensuring that the tree remains relatively balanced and efficient for operations."},
    {"Tag": "Tree", "Question": "What is a self-balancing tree?", "Answer": "A self-balancing tree is a tree data structure that automatically maintains its balance during insertions, deletions, and other operations to ensure efficient performance."},
    {"Tag": "Tree", "Question": "What is an AVL tree?", "Answer": "An AVL tree is a self-balancing binary search tree in which the heights of the left and right subtrees of every node differ by at most one."},
    {"Tag": "Tree", "Question": "What is a red-black tree?", "Answer": "A red-black tree is a self-balancing binary search tree in which each node contains an extra bit for representing the color (red or black) and follows certain rules to ensure balanced insertion and deletion operations."},
    {"Tag": "Tree", "Question": "What is a B-tree?", "Answer": "A B-tree is a self-balancing tree data structure that maintains sorted data and allows for efficient insertion, deletion, and searching operations by keeping multiple keys in each node and ensuring a minimum fill factor."},
    {"Tag": "Tree", "Question": "What is a trie tree?", "Answer": "A trie tree, also known as a prefix tree, is a tree data structure used for storing a dynamic set of strings in a way that allows for efficient retrieval of strings with a common prefix."},
    {"Tag": "Tree", "Question": "What is a heap tree?", "Answer": "A heap tree is a specialized tree-based data structure that satisfies the heap property, which can be either a min-heap (where the parent node is less than or equal to its children) or a max-heap (where the parent node is greater than or equal to its children)."},
    {"Tag": "Tree", "Question": "What is a ternary tree?", "Answer": "A ternary tree is a tree data structure in which each node has at most three children."},
    {"Tag": "Tree", "Question": "What is a tree traversal?", "Answer": "A tree traversal is the process of visiting (or accessing) all nodes in a tree data structure in a systematic order."},
    {"Tag": "Tree", "Question": "What are the common types of tree traversals?", "Answer": "Common types of tree traversals include in-order traversal, pre-order traversal, post-order traversal, and level-order traversal (or breadth-first traversal)."},
    {"Tag": "Tree", "Question": "What is an in-order traversal?", "Answer": "An in-order traversal is a depth-first tree traversal algorithm that visits the left subtree, then the root, and finally the right subtree."},
    {"Tag": "Tree", "Question": "What is a pre-order traversal?", "Answer": "A pre-order traversal is a depth-first tree traversal algorithm that visits the root, then the left subtree, and finally the right subtree."},
    {"Tag": "Tree", "Question": "What is a post-order traversal?", "Answer": "A post-order traversal is a depth-first tree traversal algorithm that visits the left subtree, then the right subtree, and finally the root."},
    {"Tag": "Tree", "Question": "What is a level-order traversal?", "Answer": "A level-order traversal, also known as breadth-first traversal, visits all nodes of a tree level by level, starting from the root and moving down to the leaves."},
    {"Tag": "Tree", "Question": "What is a depth-first search (DFS) on a tree?", "Answer": "Depth-first search is a graph traversal algorithm that starts at the root node and explores as far as possible along each branch before backtracking. On a tree, DFS can be implemented using pre-order, in-order, or post-order traversal."},
    {"Tag": "Tree", "Question": "What is a breadth-first search (BFS) on a tree?", "Answer": "Breadth-first search is a graph traversal algorithm that starts at the root node and explores all neighboring nodes at the present depth before moving to the next depth level. On a tree, BFS is equivalent to level-order traversal."},
    {"Tag": "Tree", "Question": "How do you find the height of a binary tree?", "Answer": "The height of a binary tree is the length of the longest path from the root node to a leaf node. It can be found recursively by calculating the height of the left and right subtrees and adding 1 to the maximum of the two heights."},
    {"Tag": "Tree", "Question": "What is a complete binary tree?", "Answer": "A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible."},
    {"Tag": "Tree", "Question": "What is a full binary tree?", "Answer": "A full binary tree is a binary tree in which every node has either zero or two children, but never one."},
    {"Tag": "Tree", "Question": "What is a perfect binary tree?", "Answer": "A perfect binary tree is a binary tree in which all internal nodes have exactly two children and all leaf nodes are at the same level."},
    {"Tag": "Tree", "Question": "What is a binary tree node?", "Answer": "A binary tree node is a fundamental unit of a binary tree data structure, consisting of a data element and references (pointers) to its left and right child nodes."},
    {"Tag": "Hash Table", "Question": "What is a hash table?", "Answer": "A hash table is a data structure that stores key-value pairs, where each key is mapped to a unique index in an array using a hash function."},
    {"Tag": "Hash Table", "Question": "What is a hash function?", "Answer": "A hash function is a function that takes an input (or 'key') and produces a fixed-size string of characters, which is typically a hash code or hash value."},
    {"Tag": "Hash Table", "Question": "What is collision resolution in hash tables?", "Answer": "Collision resolution is the process of handling two or more keys that hash to the same index in a hash table, typically by storing them in a data structure such as a linked list or by using techniques like open addressing."},
    {"Tag": "Hash Table", "Question": "What are the advantages of using hash tables?", "Answer": "Advantages of hash tables include fast insertion, deletion, and retrieval operations (on average O(1) time complexity), efficient use of memory, and flexibility in handling dynamic datasets."},
    {"Tag": "Hash Table", "Question": "What are the disadvantages of hash tables?", "Answer": "Disadvantages of hash tables include potential collisions, which can degrade performance, sensitivity to the quality of the hash function, and lack of support for operations such as range searches."},
    {"Tag": "Hash Table", "Question": "How do you implement a hash table?", "Answer": "A hash table can be implemented using an array of linked lists (for collision resolution), where each element of the array (or 'bucket') corresponds to a unique index generated by the hash function."},
    {"Tag": "Hash Table", "Question": "What is the load factor of a hash table?", "Answer": "The load factor of a hash table is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is typically denoted as α = n / m, where n is the number of elements and m is the number of slots."},
    {"Tag": "Hash Table", "Question": "How do you handle collisions in a hash table?", "Answer": "Collisions in a hash table can be handled using techniques such as separate chaining (where each bucket stores a linked list of collided keys) or open addressing (where keys are stored in alternative slots when a collision occurs)."},
    {"Tag": "Hash Table", "Question": "What is separate chaining?", "Answer": "Separate chaining is a collision resolution technique used in hash tables, where each bucket stores a linked list of collided keys."},
    {"Tag": "Hash Table", "Question": "What is open addressing?", "Answer": "Open addressing is a collision resolution technique used in hash tables, where collided keys are stored in alternative slots within the table."},
    {"Tag": "Hash Table", "Question": "What is rehashing in a hash table?", "Answer": "Rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is probing in open addressing?", "Answer": "Probing is the process of finding an alternative slot to store a key when a collision occurs in open addressing. Common probing methods include linear probing, quadratic probing, and double hashing."},
    {"Tag": "Hash Table", "Question": "What is linear probing?", "Answer": "Linear probing is a probing technique used in open addressing, where collided keys are stored in the next available slot in the table."},
    {"Tag": "Hash Table", "Question": "What is quadratic probing?", "Answer": "Quadratic probing is a probing technique used in open addressing, where collided keys are stored in slots that are offset by a quadratic function of the original hash value."},
    {"Tag": "Hash Table", "Question": "What is double hashing?", "Answer": "Double hashing is a probing technique used in open addressing, where an alternative hash function is applied to the original key to calculate the step size for probing."},
    {"Tag": "Hash Table", "Question": "What is the purpose of a hash table?", "Answer": "The purpose of a hash table is to provide efficient storage and retrieval of key-value pairs, allowing for fast access to data based on its associated key."},
    {"Tag": "Hash Table", "Question": "How do you calculate the hash value of a key?", "Answer": "The hash value of a key is typically calculated using a hash function, which may involve transforming the key's data into a fixed-size string of characters and then performing further operations such as modulo division to map it to an index in the hash table."},
    {"Tag": "Hash Table", "Question": "What is a perfect hash function?", "Answer": "A perfect hash function is a hash function that maps each key to a unique index in the hash table, eliminating collisions entirely."},
    {"Tag": "Hash Table", "Question": "What is a hash collision?", "Answer": "A hash collision occurs when two or more keys produce the same hash value or hash code, leading to them being mapped to the same index in the hash table."},
    {"Tag": "Hash Table", "Question": "What is a hash bucket?", "Answer": "A hash bucket is a slot or container in a hash table that stores one or more key-value pairs. Each bucket corresponds to an index in the table and may contain collided keys."},
    {"Tag": "Hash Table", "Question": "What is the time complexity of operations in a hash table?", "Answer": "The time complexity of operations in a hash table, such as insertion, deletion, and retrieval, is typically O(1) on average, assuming a good hash function and uniform distribution of keys."},
    {"Tag": "Hash Table", "Question": "What is the worst-case time complexity of operations in a hash table?", "Answer": "The worst-case time complexity of operations in a hash table, such as insertion, deletion, and retrieval, is O(n), where n is the number of elements stored in the table."},
    {"Tag": "Hash Table", "Question": "What is the difference between a hash table and an array?", "Answer": "While both hash tables and arrays store collections of elements, hash tables provide more efficient access to elements based on their associated keys, using a hash function to map keys to indices in the table, whereas arrays use sequential indices."},
    {"Tag": "Hash Table", "Question": "What is the difference between a hash table and a binary search tree?", "Answer": "While both hash tables and binary search trees store key-value pairs and support efficient retrieval operations, hash tables provide O(1) average-case time complexity for retrieval (assuming uniform distribution of keys), whereas binary search trees provide O(log n) time complexity, where n is the number of elements."},
    {"Tag": "Hash Table", "Question": "What is the difference between a hash table and a linked list?", "Answer": "While both hash tables and linked lists store collections of elements, hash tables provide more efficient retrieval operations based on keys, using a hash function to map keys to indices in the table, whereas linked lists store elements sequentially and require linear-time traversal to access specific elements."},
    {"Tag": "Hash Table", "Question": "What is the difference between a hash table and a set?", "Answer": "While both hash tables and sets store collections of unique elements, hash tables typically store key-value pairs, allowing for efficient retrieval operations based on keys, whereas sets store only keys and support operations such as insertion, deletion, and membership testing."},
    {"Tag": "Hash Table", "Question": "What is a hash table collision resolution strategy?", "Answer": "A hash table collision resolution strategy is a method used to handle collisions that occur when two or more keys produce the same hash value, typically involving techniques such as separate chaining or open addressing."},
    {"Tag": "Hash Table", "Question": "What is a hash table load factor?", "Answer": "The hash table load factor is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is used to measure the fullness of the table and determine when rehashing is necessary."},
    {"Tag": "Hash Table", "Question": "What is a hash table rehashing?", "Answer": "Hash table rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is a hash table probing technique?", "Answer": "A hash table probing technique is a method used to find an alternative slot to store a key when a collision occurs in open addressing, typically involving methods such as linear probing, quadratic probing, or double hashing."},
    {"Tag": "Hash Table", "Question": "What is a hash table collision?", "Answer": "A hash table collision occurs when two or more keys produce the same hash value, causing them to be mapped to the same index in the hash table."},
    {"Tag": "Hash Table", "Question": "What is a hash table load factor?", "Answer": "The hash table load factor is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is used to measure the fullness of the table and determine when rehashing is necessary."},
    {"Tag": "Hash Table", "Question": "What is a hash table rehashing?", "Answer": "Hash table rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is a hash table probing technique?", "Answer": "A hash table probing technique is a method used to find an alternative slot to store a key when a collision occurs in open addressing, typically involving methods such as linear probing, quadratic probing, or double hashing."},
    {"Tag": "Hash Table", "Question": "What is a hash table collision resolution strategy?", "Answer": "A hash table collision resolution strategy is a method used to handle collisions that occur when two or more keys produce the same hash value, typically involving techniques such as separate chaining or open addressing."},
    {"Tag": "Hash Table", "Question": "What is a hash table load factor?", "Answer": "The hash table load factor is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is used to measure the fullness of the table and determine when rehashing is necessary."},
    {"Tag": "Hash Table", "Question": "What is a hash table rehashing?", "Answer": "Hash table rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is a hash table probing technique?", "Answer": "A hash table probing technique is a method used to find an alternative slot to store a key when a collision occurs in open addressing, typically involving methods such as linear probing, quadratic probing, or double hashing."},
    {"Tag": "Hash Table", "Question": "What is a hash table collision resolution strategy?", "Answer": "A hash table collision resolution strategy is a method used to handle collisions that occur when two or more keys produce the same hash value, typically involving techniques such as separate chaining or open addressing."},
    {"Tag": "Hash Table", "Question": "What is a hash table load factor?", "Answer": "The hash table load factor is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is used to measure the fullness of the table and determine when rehashing is necessary."},
    {"Tag": "Hash Table", "Question": "What is a hash table rehashing?", "Answer": "Hash table rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is a hash table probing technique?", "Answer": "A hash table probing technique is a method used to find an alternative slot to store a key when a collision occurs in open addressing, typically involving methods such as linear probing, quadratic probing, or double hashing."},
    {"Tag": "Hash Table", "Question": "What is a hash table collision resolution strategy?", "Answer": "A hash table collision resolution strategy is a method used to handle collisions that occur when two or more keys produce the same hash value, typically involving techniques such as separate chaining or open addressing."},
    {"Tag": "Hash Table", "Question": "What is a hash table load factor?", "Answer": "The hash table load factor is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is used to measure the fullness of the table and determine when rehashing is necessary."},
    {"Tag": "Hash Table", "Question": "What is a hash table rehashing?", "Answer": "Hash table rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is a hash table probing technique?", "Answer": "A hash table probing technique is a method used to find an alternative slot to store a key when a collision occurs in open addressing, typically involving methods such as linear probing, quadratic probing, or double hashing."},
    {"Tag": "Hash Table", "Question": "What is a hash table collision resolution strategy?", "Answer": "A hash table collision resolution strategy is a method used to handle collisions that occur when two or more keys produce the same hash value, typically involving techniques such as separate chaining or open addressing."},
    {"Tag": "Hash Table", "Question": "What is a hash table load factor?", "Answer": "The hash table load factor is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is used to measure the fullness of the table and determine when rehashing is necessary."},
    {"Tag": "Hash Table", "Question": "What is a hash table rehashing?", "Answer": "Hash table rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is a hash table probing technique?", "Answer": "A hash table probing technique is a method used to find an alternative slot to store a key when a collision occurs in open addressing, typically involving methods such as linear probing, quadratic probing, or double hashing."},
    {"Tag": "Hash Table", "Question": "What is a hash table collision resolution strategy?", "Answer": "A hash table collision resolution strategy is a method used to handle collisions that occur when two or more keys produce the same hash value, typically involving techniques such as separate chaining or open addressing."},
    {"Tag": "Hash Table", "Question": "What is a hash table load factor?", "Answer": "The hash table load factor is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is used to measure the fullness of the table and determine when rehashing is necessary."},
    {"Tag": "Hash Table", "Question": "What is a hash table rehashing?", "Answer": "Hash table rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is a hash table probing technique?", "Answer": "A hash table probing technique is a method used to find an alternative slot to store a key when a collision occurs in open addressing, typically involving methods such as linear probing, quadratic probing, or double hashing."},
    {"Tag": "Hash Table", "Question": "What is a hash table collision resolution strategy?", "Answer": "A hash table collision resolution strategy is a method used to handle collisions that occur when two or more keys produce the same hash value, typically involving techniques such as separate chaining or open addressing."},
    {"Tag": "Hash Table", "Question": "What is a hash table load factor?", "Answer": "The hash table load factor is the ratio of the number of elements stored in the table to the number of slots (or buckets) available. It is used to measure the fullness of the table and determine when rehashing is necessary."},
    {"Tag": "Hash Table", "Question": "What is a hash table rehashing?", "Answer": "Hash table rehashing is the process of resizing and reorganizing a hash table when its load factor exceeds a certain threshold, typically to maintain performance and efficiency."},
    {"Tag": "Hash Table", "Question": "What is a hash table probing technique?", "Answer": "A hash table probing technique is a method used to find an alternative slot to store a key when a collision occurs in open addressing, typically involving methods such as linear probing, quadratic probing, or double hashing."},
]



@app.route('/')
def home():
    return render_template('hmm.html')

@app.route('/retrieve_qa', methods=['POST'])
def retrieve_qa():
    question = request.form['question'].lower()  # Convert input question to lowercase
    print("Question asked:", question)
    for qa_pair in dataset:
        print("Checking:", qa_pair['Question'].lower())  # Convert dataset question to lowercase
        if question in qa_pair['Question'].lower():
            print("Match found!")
            return jsonify({'answer': qa_pair['Answer']})
    print("No match found!")
    return jsonify({'answer': 'No matching answer found.'})

@app.route('/add_qa', methods=['POST'])
def add_qa():
    tag = request.form['tag']
    question = request.form['question']
    answer = request.form['answer']
    dataset.append({"Tag": tag, "Question": question, "Answer": answer})
    return jsonify({'message': 'QA pair added successfully', 'tag': tag, 'question': question, 'answer': answer})

if __name__ == '__main__':
    app.run(debug=True)
